// <auto-generated />
using System;
using InfyKiddoFun.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfyKiddoFun.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230311081008_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("AgeGroup")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseMaterial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("MaterialType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseMaterial");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModuleMaterial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("MaterialType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModuleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("CourseModuleMaterial");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModuleProgress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseModuleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseProgressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleId");

                    b.HasIndex("CourseProgressId");

                    b.ToTable("CourseModuleProgresses");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseProgress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseProgresses");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.MentorUser", b =>
                {
                    b.HasBaseType("InfyKiddoFun.Domain.Entities.AppUser");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.ParentUser", b =>
                {
                    b.HasBaseType("InfyKiddoFun.Domain.Entities.AppUser");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.StudentUser", b =>
                {
                    b.HasBaseType("InfyKiddoFun.Domain.Entities.AppUser");

                    b.Property<byte>("AgeGroup")
                        .HasColumnType("tinyint");

                    b.Property<string>("PreferredSubjects")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.Course", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.MentorUser", "Mentor")
                        .WithMany("Courses")
                        .HasForeignKey("MentorId");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId");

                    b.HasOne("InfyKiddoFun.Domain.Entities.StudentUser", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseMaterial", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.Course", "Course")
                        .WithMany("Materials")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModule", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModuleMaterial", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.CourseModule", "Module")
                        .WithMany("Materials")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModuleProgress", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.CourseModule", "CourseModule")
                        .WithMany()
                        .HasForeignKey("CourseModuleId");

                    b.HasOne("InfyKiddoFun.Domain.Entities.CourseProgress", "CourseProgress")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseProgressId");

                    b.Navigation("CourseModule");

                    b.Navigation("CourseProgress");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseProgress", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("InfyKiddoFun.Domain.Entities.StudentUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.ParentUser", b =>
                {
                    b.HasOne("InfyKiddoFun.Domain.Entities.StudentUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseModule", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.CourseProgress", b =>
                {
                    b.Navigation("CourseModules");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.MentorUser", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("InfyKiddoFun.Domain.Entities.StudentUser", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
